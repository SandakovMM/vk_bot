#!/usr/bin/python3

import unittest
import json
from moon_bot import *
from configuration import *

class TestMoonBot(unittest.TestCase):
    def setUp(self):
        config = Configuration("./tests/test_conf.json")
        self.moonBot = boockingBot(config)

    def test_init_type_buttons_from_conf(self):
        self.assertEqual(SERVICE_TYPES, ['Adding', 'Updating', 'Removing'])
        self.assertEqual(KEYBOARD_SERVICE_TYPE, {'one_time': True, 'buttons': [[
            {'action': {'type': 'text', 'payload': '{"buttons": 1}', 'label': 'Adding'}, 'color': 'primary'},
            {'action': {'type': 'text', 'payload': '{"buttons": 2}', 'label': 'Updating'}, 'color': 'primary'},
            {'action': {'type': 'text', 'payload': '{"buttons": 3}', 'label': 'Removing'}, 'color': 'primary'}]]})

    def test_init_services_buttons_from_conf(self):
        self.assertEqual(KEYBOARDS_SERVICES_BY_TYPE,
            {'Adding': {'one_time': True, 'buttons': [[
                {'action': {'type': 'text', 'payload': '{"buttons": 1}', 'label': 'a_one'}, 'color': 'primary'},
                {'action': {'type': 'text', 'payload': '{"buttons": 2}', 'label': 'a_two'}, 'color': 'primary'},
                {'action': {'type': 'text', 'payload': '{"buttons": 3}', 'label': 'a_three'}, 'color': 'primary'}]]},
             'Updating': {'one_time': True, 'buttons': [[
                 {'action': {'type': 'text', 'payload': '{"buttons": 1}', 'label': 'u_one'}, 'color': 'primary'},
                 {'action': {'type': 'text', 'payload': '{"buttons": 2}', 'label': 'u_two'}, 'color': 'primary'},
                 {'action': {'type': 'text', 'payload': '{"buttons": 3}', 'label': 'u_three'}, 'color': 'primary'}]]},
             'Removing': {'one_time': True, 'buttons': [[
                 {'action': {'type': 'text', 'payload': '{"buttons": 1}', 'label': 'r_one'}, 'color': 'primary'},
                 {'action': {'type': 'text', 'payload': '{"buttons": 2}', 'label': 'r_two'}, 'color': 'primary'}]]}})


class TestUserAnswers(unittest.TestCase):
    def setUp(self):
        config = Configuration("./tests/test_conf.json")
        self.moonBot = boockingBot(config)
        self.moonBot.clients_table[1] = User(1, 'test_user')
        self.moonBot.clients_table[2] = User(2, 'sec_user', gift=True)

    def test_usual_greetings(self):
        self.assertEqual(self.moonBot.make_greetings(3, 'test_user_3')['message'],
                         "test_user_3, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    def test_gifted_greetings(self):
        self.moonBot.config.make_gifts = True
        self.assertEqual(self.moonBot.make_greetings(3, 'test_user_3')['message'],
                         "test_user_3, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∏–∂–µ üéÅ\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –≤–∞–º–∏ –∫—É–ø–æ–Ω üòâ")

    def test_answer_booking_needed(self):
        test_user = self.moonBot.clients_table[1]

        self.assertEqual(self.moonBot.receive_booking_needed(test_user, '–ü—Ä–∏–≤–µ—Ç')['message'],
                         "–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ =)")

        self.assertEqual(self.moonBot.receive_booking_needed(test_user, '–î–∞')['message'],
                        "test_user, –∫–∞–∫–æ–π –≤–∏–¥ —É—Å–ª—É–≥–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É :)")

    def test_answer_another_service(self):
        test_user = self.moonBot.clients_table[1]

        self.assertEqual(self.moonBot.receive_add_more(test_user, '–ù–µ—Ç')['message'],
                         "–í –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–¥—Ç–∏? –ù–∞–ø–∏—à–∏—Ç–µ —ç—Ç–æ –≤ –¥–∏–∞–ª–æ–≥ –∏ –º—ã –≤–∞—Å –∑–∞–ø–∏—à–µ–º.")

        self.assertEqual(self.moonBot.receive_booking_needed(test_user, '–î–∞')['message'],
                        "test_user, –∫–∞–∫–æ–π –≤–∏–¥ —É—Å–ª—É–≥–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É :)")

    def test_add_service(self):
        test_user = self.moonBot.clients_table[1]

        self.moonBot.receive_booking_needed(test_user, '–î–∞')
        self.assertEqual(self.moonBot.receive_service_type(test_user, 'a_one')['message'],
                         '–°–ø–∞—Å–∏–±–æ) –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—Å–ª—É–≥—É?\n')
        self.moonBot.receive_add_more(test_user, '–ù–µ—Ç')
        self.assertEqual(self.moonBot.receive_service_day(test_user, '11.12.2019 11:20'),
                         {'message': '–í—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Ä–∞!\n–ñ–¥–µ–º –≤–∞—Å 2019-12-11 11:20:00 –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ a_one! ‚ù§\n'})

    def test_time_collapse_checking(self):
        test_user = self.moonBot.clients_table[1]
        self.moonBot.receive_booking_needed(test_user, '–î–∞')
        self.assertEqual(self.moonBot.receive_service_type(test_user, 'a_one')['message'],
                         '–°–ø–∞—Å–∏–±–æ) –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—Å–ª—É–≥—É?\n')
        self.moonBot.receive_add_more(test_user, '–ù–µ—Ç')
        self.assertEqual(self.moonBot.receive_service_day(test_user, '11.12.2019 11:20'),
                         {'message': '–í—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Ä–∞!\n–ñ–¥–µ–º –≤–∞—Å 2019-12-11 11:20:00 –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ a_one! ‚ù§\n'})

        self.moonBot.receive_booking_needed(test_user, '–î–∞')
        self.moonBot.receive_service_type(test_user, 'u_two')
        self.moonBot.receive_add_more(test_user, '–ù–µ—Ç')
        self.assertEqual(self.moonBot.receive_service_day(test_user, '11.12.2019 11:21'),
                         {'message': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ =( –ë–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è 2019-12-11 11:36:00'})
        self.assertEqual(self.moonBot.receive_service_day(test_user, '11.12.2019 11:36'),
                         {'message': '–í—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Ä–∞!\n–ñ–¥–µ–º –≤–∞—Å 2019-12-11 11:36:00 –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ u_two! ‚ù§\n'})

        self.moonBot.receive_booking_needed(test_user, '–î–∞')
        self.moonBot.receive_service_type(test_user, 'r_one')
        self.moonBot.receive_add_more(test_user, '–ù–µ—Ç')
        self.assertEqual(self.moonBot.receive_service_day(test_user, '11.12.2019 11:21'),
                         {'message': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ =( –ë–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è 2019-12-11 11:04:00'})

    def test_agrigate_few_services(self):
        test_user = self.moonBot.clients_table[1]

        self.moonBot.receive_booking_needed(test_user, '–î–∞')
        self.assertEqual(self.moonBot.receive_service_type(test_user, 'a_one')['message'],
                         '–°–ø–∞—Å–∏–±–æ) –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—Å–ª—É–≥—É?\n')
        self.moonBot.receive_add_more(test_user, '–î–∞')
        self.moonBot.receive_service_type(test_user, 'u_one')
        self.moonBot.receive_add_more(test_user, '–î–∞')
        self.moonBot.receive_service_type(test_user, 'r_one')
        self.moonBot.receive_add_more(test_user, '–ù–µ—Ç')

        self.assertEqual(self.moonBot.receive_service_day(test_user, '11.12.2019 11:21'),
                         {'message': '–í—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Ä–∞!\n–ñ–¥–µ–º –≤–∞—Å 2019-12-11 11:21:00 –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö a_one, u_one –∏ r_one! ‚ù§\n'})

    def test_add_or_not_gift(self):
        self.assertEqual(self.moonBot.send_greetings(self.moonBot.clients_table[1])['message'],
                         'test_user, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        self.assertEqual(self.moonBot.send_greetings(self.moonBot.clients_table[2])['message'],
                         'sec_user, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∏–∂–µ \U0001F381\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –≤–∞–º–∏ –∫—É–ø–æ–Ω \U0001F609')

class TestMobileNumberChecks(unittest.TestCase):
    def setUp(self):
        pass

    def test_letters_noly(self):
        self.assertEqual(False, is_mobile_number('rrasastrt'))

    def test_normal_number(self):
        self.assertEqual(True, is_mobile_number('+79134448855'))

    def test_normal_number_other_start(self):
        self.assertEqual(True, is_mobile_number('89134448855'))

    def test_one_letter_in(self):
        self.assertEqual(False, is_mobile_number('+791344488q5'))

    def test_one_letter_in_other_start(self):
        self.assertEqual(False, is_mobile_number('891344488q5'))

    def test_too_many(self):
        self.assertEqual(False, is_mobile_number('+791344488555'))

if __name__ == '__main__':
    unittest.main()